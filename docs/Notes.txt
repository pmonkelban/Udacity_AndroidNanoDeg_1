== TO DO ==
- Update query for artist so that it also caches the top tracks for the first N artists returned.
- Add preferences for the following:
  -- Allow Explicit Lyrics
  -- Cache lifetime (1 hour, 6 hours, etc.)
- Change cache expiration logic to use Calendar instead of Date.
- Make sure track table does not have the artist's spotifyId. Use the _id foreign key.


- Content Provider URIs:

-- Get all artists that match query string
CONTENT://udacity.nano.spotifystreamer/getArtists/[string]

-- Get the Top Tracks for the given artist
CONTENT://udacity.nano.spotifystreamer/getTracks/[string]







- Database Tables:

The following SQLite database tables are used to store artist query results.  This allows the
application to maintain state when stopped, or when the configuration changes (i.e. screen
rotation).  The database also servers as a cache.  Recent results can be pulled from the database,
thus reducing the need to fetch data from the network.  The createTime timestamp provides
a mechanism for keeping the size of the database in check.  On each insert, the application can
delete entries that are older than a specified item.

Query:
*query - String

Query_Artist:
*query - String - FK_Query
*artistId - String - FK_Artist
createTime - Timestamp

Artist:
spotifyId - String
name - String
icon - URL String
createTime - Timestamp

Track:
*spotifyId - String
artistId - String - FK_Artist
name - String
album - String
duration - long
explicit - boolean
playable - boolean
popularity - int
previewURL - String
icon - URL String
(currentPosition - Long)???
createTime - Timestamp


- Caching Strategy

See CacheArtistFlowChart.pdf and CacheTopTracksFlowChart.pdf
